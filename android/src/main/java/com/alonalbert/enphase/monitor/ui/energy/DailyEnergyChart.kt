package com.alonalbert.enphase.monitor.ui.energy

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.alonalbert.enphase.monitor.ui.theme.Colors
import com.patrykandpatrick.vico.compose.cartesian.CartesianChartHost
import com.patrykandpatrick.vico.compose.cartesian.axis.rememberStart
import com.patrykandpatrick.vico.compose.cartesian.cartesianLayerPadding
import com.patrykandpatrick.vico.compose.cartesian.layer.rememberColumnCartesianLayer
import com.patrykandpatrick.vico.compose.cartesian.layer.stacked
import com.patrykandpatrick.vico.compose.cartesian.rememberCartesianChart
import com.patrykandpatrick.vico.compose.cartesian.rememberVicoZoomState
import com.patrykandpatrick.vico.compose.common.component.rememberLineComponent
import com.patrykandpatrick.vico.compose.common.fill
import com.patrykandpatrick.vico.core.cartesian.axis.VerticalAxis
import com.patrykandpatrick.vico.core.cartesian.data.CartesianChartModelProducer
import com.patrykandpatrick.vico.core.cartesian.data.CartesianLayerRangeProvider
import com.patrykandpatrick.vico.core.cartesian.data.CartesianValueFormatter
import com.patrykandpatrick.vico.core.cartesian.data.columnSeries
import com.patrykandpatrick.vico.core.cartesian.layer.ColumnCartesianLayer
import com.patrykandpatrick.vico.core.cartesian.marker.DefaultCartesianMarker
import com.patrykandpatrick.vico.core.common.data.ExtraStore
import kotlinx.coroutines.runBlocking
import java.text.DecimalFormat

private val LegendLabelKey = ExtraStore.Key<Set<String>>()
private val YDecimalFormat = DecimalFormat("#")
private val StartAxisValueFormatter = CartesianValueFormatter.decimal(YDecimalFormat)
private val MarkerValueFormatter = DefaultCartesianMarker.ValueFormatter.default(YDecimalFormat)

private val RangeProvider =
  object : CartesianLayerRangeProvider {
    override fun getMinX(minX: Double, maxX: Double, extraStore: ExtraStore) =
      0.0

    override fun getMaxX(minX: Double, maxX: Double, extraStore: ExtraStore) =
      96.0
  }

@Composable
fun DailyEnergyChart(
  modelProducer: CartesianChartModelProducer,
  modifier: Modifier = Modifier,
) {
  CartesianChartHost(
    chart =
      rememberCartesianChart(
        rememberColumnCartesianLayer(
          rangeProvider = RangeProvider,
          columnProvider =
            ColumnCartesianLayer.ColumnProvider.series(
              rememberLineComponent(fill = fill(Colors.Produced), thickness = 2.2.dp),
              rememberLineComponent(fill = fill(Colors.Consumed), thickness = 2.2.dp),
              rememberLineComponent(fill = fill(Colors.Imported), thickness = 2.2.dp),
              rememberLineComponent(fill = fill(Colors.Battery), thickness = 2.2.dp),
              rememberLineComponent(fill = fill(Colors.Battery), thickness = 2.2.dp),
            ),
          columnCollectionSpacing = 0.8.dp,

          mergeMode = { ColumnCartesianLayer.MergeMode.stacked() },
        ),
        startAxis =
          VerticalAxis.rememberStart(
            guideline = null,

            valueFormatter = StartAxisValueFormatter,
          ),
        marker = rememberMarker(MarkerValueFormatter),
        layerPadding = { cartesianLayerPadding(scalableStart = 0.dp, scalableEnd = 0.dp) },
      ),
    modelProducer = modelProducer,
    modifier = modifier.height(252.dp),
    zoomState = rememberVicoZoomState(zoomEnabled = false),
  )
}

private val x = (0 until 24 * 4).toList()

val produced = listOf(
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.004,
  0.004,
  0.056,
  0.076,
  0.084,
  0.140,
  0.180,
  0.212,
  0.384,
  0.560,
  0.972,
  1.784,
  2.988,
  3.844,
  4.576,
  5.096,
  5.344,
  5.972,
  6.580,
  7.496,
  7.928,
  8.704,
  9.356,
  9.772,
  10.048,
  10.452,
  10.544,
  7.100,
  6.080,
  5.500,
  5.140,
  5.348,
  7.800,
  10.728,
  10.312,
  6.192,
  8.700,
  9.752,
  9.036,
  8.792,
  6.780,
  7.856,
  7.692,
  6.632,
  4.812,
  3.060,
  2.260,
  1.384,
  1.036,
  0.620,
  0.416,
  0.348,
  0.216,
  0.148,
  0.116,
  0.092,
  0.064,
  0.040,
  0.016,
  0.008,
  0.004,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000
)
val consumed = listOf(
  0.756,
  0.808,
  0.748,
  1.016,
  1.844,
  0.512,
  0.576,
  0.600,
  0.600,
  0.708,
  0.748,
  0.684,
  0.692,
  0.788,
  0.768,
  0.704,
  0.680,
  0.704,
  0.796,
  0.764,
  0.644,
  0.676,
  0.872,
  0.932,
  0.916,
  0.764,
  0.644,
  0.664,
  0.720,
  0.908,
  2.336,
  0.796,
  0.832,
  1.084,
  0.636,
  1.076,
  0.776,
  0.748,
  0.968,
  1.356,
  1.272,
  1.044,
  1.264,
  0.920,
  0.944,
  0.924,
  1.020,
  0.936,
  0.896,
  0.952,
  1.388,
  0.956,
  0.968,
  3.616,
  7.224,
  6.700,
  1.664,
  5.320,
  6.556,
  6.536,
  5.696,
  1.484,
  6.424,
  7.852,
  4.324,
  1.384,
  4.236,
  7.428,
  3.656,
  8.208,
  6.616,
  5.728,
  2.660,
  6.588,
  6.444,
  6.132,
  1.396,
  1.108,
  1.152,
  1.260,
  2.848,
  1.248,
  1.604,
  1.632,
  1.180,
  2.272,
  1.204,
  1.320,
  2.604,
  2.840,
  2.836,
  1.588,
  0.896,
  0.992,
  2.968,
  1.112
)
val imported = listOf(
  0.792,
  0.836,
  0.776,
  1.048,
  1.872,
  0.112,
  0.048,
  0.032,
  0.036,
  0.044,
  0.032,
  0.020,
  0.036,
  0.052,
  0.024,
  0.036,
  0.044,
  0.024,
  0.036,
  0.032,
  0.028,
  0.040,
  0.036,
  -0.004,
  -0.028,
  -0.016,
  -0.068,
  -0.088,
  -0.096,
  -0.244,
  -0.356,
  -0.696,
  -1.228,
  -1.768,
  -2.020,
  -2.152,
  -2.280,
  -2.228,
  -2.160,
  -2.452,
  -2.780,
  -3.092,
  -3.376,
  -3.572,
  -3.680,
  -3.764,
  -4.220,
  -6.660,
  -5.936,
  -5.024,
  -3.988,
  -4.076,
  -4.276,
  -4.128,
  -3.784,
  -3.604,
  -3.948,
  -3.532,
  -3.548,
  -3.396,
  -3.416,
  -3.224,
  -2.952,
  -2.824,
  -2.644,
  -2.044,
  -1.456,
  -1.096,
  -0.736,
  0.700,
  -0.288,
  -0.148,
  0.024,
  0.024,
  0.056,
  0.052,
  0.100,
  0.072,
  0.076,
  0.060,
  0.060,
  0.268,
  1.620,
  1.672,
  1.216,
  2.300,
  1.248,
  1.344,
  2.656,
  3.184,
  2.900,
  1.612,
  0.932,
  1.032,
  2.992,
  1.176
)
val charged = listOf(
  0.040,
  0.028,
  0.028,
  0.032,
  0.036,
  0.004,
  0.008,
  0.012,
  0.012,
  0.004,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.008,
  0.008,
  0.004,
  0.008,
  0.004,
  0.036,
  0.052,
  0.072,
  0.540,
  1.188,
  1.352,
  2.040,
  2.368,
  2.844,
  2.772,
  3.444,
  3.792,
  4.064,
  4.864,
  5.148,
  5.360,
  5.212,
  2.948,
  0.268,
  0.104,
  0.124,
  0.108,
  0.108,
  0.080,
  0.112,
  0.224,
  0.672,
  0.112,
  0.004,
  0.000,
  0.456,
  2.232,
  0.000,
  0.000,
  1.136,
  1.412,
  0.020,
  0.000,
  0.008,
  0.000,
  0.000,
  0.004,
  0.000,
  0.000,
  0.000,
  0.000,
  0.004,
  0.000,
  0.000,
  0.000,
  0.000,
  0.004,
  0.024,
  0.040,
  0.036,
  0.028,
  0.044,
  0.024,
  0.052,
  0.344,
  0.064,
  0.024,
  0.040,
  0.040,
  0.024,
  0.064
)
val discharged = listOf(
  0.004,
  0.000,
  0.000,
  0.000,
  0.008,
  0.404,
  0.536,
  0.580,
  0.576,
  0.668,
  0.716,
  0.664,
  0.656,
  0.736,
  0.744,
  0.668,
  0.636,
  0.680,
  0.760,
  0.732,
  0.616,
  0.632,
  0.832,
  0.880,
  0.864,
  0.704,
  0.580,
  0.572,
  0.612,
  0.768,
  2.168,
  0.572,
  0.344,
  0.404,
  0.000,
  0.004,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.004,
  0.024,
  0.392,
  0.216,
  0.088,
  0.264,
  0.356,
  0.896,
  0.776,
  0.164,
  1.516,
  2.984,
  1.472,
  0.028,
  2.652,
  6.264,
  3.016,
  6.472,
  6.284,
  5.464,
  2.288,
  6.348,
  6.240,
  5.964,
  1.212,
  0.972,
  1.036,
  1.184,
  2.780,
  0.980,
  0.008,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.000,
  0.004,
  0.000,
  0.000,
  0.000
)

private val y: Map<String, List<Number>> =
  mapOf(
    "Produced" to produced,
    "Consumed" to consumed.map { -it },
    "Imported" to imported,
    "Charged" to charged.map { -it },
    "Discharged" to discharged,
  )

@Composable
fun DailyEnergyChart(modifier: Modifier = Modifier) {
  val modelProducer = remember { CartesianChartModelProducer() }
  LaunchedEffect(Unit) {
    modelProducer.runTransaction {
      // Learn more: https://patrykandpatrick.com/eji9zq.
      columnSeries { y.values.forEach { series(x, it) } }
      extras { it[LegendLabelKey] = y.keys }
    }
  }
  DailyEnergyChart(modelProducer, modifier)
}

@Composable
@Preview
private fun Preview() {
  val modelProducer = remember { CartesianChartModelProducer() }
  // Use `runBlocking` only for previews, which donâ€™t support asynchronous execution.
  runBlocking {
    modelProducer.runTransaction {
      // Learn more: https://patrykandpatrick.com/eji9zq.
      columnSeries { y.values.forEach { series(x, it) } }
      extras { it[LegendLabelKey] = y.keys }
    }
  }
  Box(modifier = Modifier
    .background(Color.White)
    .padding(16.dp)) {
    DailyEnergyChart(modelProducer)
  }
}
